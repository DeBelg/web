---
const { item } = Astro.props;
import { format, compareAsc, addDays, isFuture } from 'date-fns';
import { marked } from 'marked';
import EventsExt from '../events-ext.json';
import core from "../core.json";

function findExt () {
    let slug = null
    if (item.links?.web && item.links.web.match(/^https:\/\/lu.ma\//)) {
        slug = item.links.web.match(/^https:\/\/lu.ma\/(.+)$/)[1]
    }
    if (item.links?.rsvp && item.links.rsvp.match(/^https:\/\/lu.ma\//)) {
        slug = item.links.rsvp.match(/^https:\/\/lu.ma\/(.+)$/)[1]
    }
    if (!slug) {
        return null
    }
    return EventsExt.find(ex => ex.url === slug)
}

function getSpeaker (id) {
    return core.people.find(p => p.id === id)
}

const ext = findExt()

const isDate = item.date.match(/^\d{4}-\d{2}-\d{2}$/)
const future = isDate && !isFuture(new Date(item.date));

function dateFormat (str) {
    if (str.match(/^\d{4}-\d{2}-\d{2}$/)) {
        return format(new Date(str), 'MMM d, yyyy')
    }
    const qm = str.match(/^(\d{4})\/(\w+)$/)
    if (qm) {
        return `${qm[2]}, ${qm[1]}`
    }
    return str
}

function nameRenderer (item) {
    let num;
    let ccm = item.coincidence?.match(/\[(\w+)\]/)
    let cc = ccm && ccm[1] ? ccm[1] : (item.coincidence ? item.coincidence : null)
    switch (item.type) {
        case 'summit':
            num = item.id.match(/^w3ps(\d+)$/)[1]
            return `Summmit #${num} ${item.city}`// + (cc ? ` @ ${cc}` : '')
            break;
        case 'meetup':
            num = item.id.match(/(\d+)$/)
            return `Meetup ${item.city} #${num ? num[1] : 'TBD'}`// + (cc ? ` @ ${cc}` : '')
            break;
        case 'hackathon':
            num = item.id.match(/^w3ph(\d+)$/)[1]
            return `Hackathon #${num} ${item.city}`// + (cc ? ` @ ${cc}` : '')
            break;
    }
}

function ccRenderer (item) {
    let ccm = item.coincidence?.match(/\[(\w+)\]/)
    let cc = ccm && ccm[1] ? ccm[1] : (item.coincidence ? item.coincidence : null)
    return cc
}

function dateEnd(str, days) {
    return format(addDays(new Date(str), days), 'yyyy-MM-dd');
}

const statuses = {
    preregistration: {
        title: 'Pre-registration',
        color: 'text-orange-500',
    },
    unconfirmed: {
        title: 'Planned',
        color: ''
    },
    confirmed: {
        title: 'Confirmed',
        color: 'text-green-500',
    },
    past: {
        title: 'Already happened',
        color: 'text-green-800',
    }
}

const status = item.confirmed
    ? (future ? statuses.past : statuses.confirmed)
    : (item.links?.rsvp ? statuses.preregistration : statuses.unconfirmed);

---

<div class="w3pn-event-item">
    <div class="event-header flex">
        <div class="header-base sm:flex gap-4 grow px-3 py-2.5 sm:px-4 sm:py-3 cursor-pointer">
            <div class="w-full sm:w-28 flex sm:block sm:text-right leading-normal">
                <div class="">{dateFormat(item.date)}</div>
                {item.days && item.days > 1 &&
                    <div class="ml-1.5"> <span class="inline-block sm:hidden">- </span>{dateFormat(dateEnd(item.date, item.days))}</div>
                }
            </div>
            <div>
                <div class="">
                    <span class="text-white text-lg">{nameRenderer(item)}</span>
                    <div class="inline-block ml-2">
                        {item.type === "hackathon" && <span class="text-xs ml-2 text-black bg-white px-1 py-0.5">HACKATHON</span>}
                        {item.type === "summit" && <span class="text-xs ml-2 text-black bg-white px-1 py-0.5">SUMMIT</span>}
                        {item.tags && item.tags.includes("sfe") && <span class="text-xs ml-2 text-black bg-gray-500 px-1 py-0.5" title="Sponsorship Free Edition (SFE)">SFE</span>}
                    </div>
                </div>
                <div class="flex gap-2">
                    <img src={`/flags/${item.country}.svg`} class="w-4" />
                    <div>
                        {item.city}, {item.country.toUpperCase()}
                        {item.coincidence &&
                            <span>&nbsp; - {ccRenderer(item)}</span>
                        }
                    </div>
                </div>
            </div>
            <div class="py-1 grow text-right items-center flex gap-4">
                <div class="grow"></div>
                {/*ext && 
                    <div class="flex -space-x-3">
                        {ext.guests.map((guest) => (
                            <div><img src={guest.avatarUrl} class="w-8 h-8 aspect-square object-fit rounded-full border-gray-800 border-2" /></div>
                        ))}
                    </div>
                */}
                {item.speakers &&
                    <div class="flex -space-x-3">
                        {item.speakers.map(spId => getSpeaker(spId)).slice(0,7).map((speaker) => (
                            <div><img src={speaker.imageUrl} class="w-8 h-8 aspect-square object-fit rounded-full border-gray-800 border-2" /></div>
                        ))}
                        {item.speakers.length > 7 &&
                            <div class="flex items-center justify-center w-8 h-8 rounded-full aspect-square border-2 border-gray-800 bg-gray-800 text-xs">+{item.speakers.length - 7}</div>
                        }
                    </div>
                }
                {/*<div class="text-sm"></div>*/}
                {item.links?.rsvp &&
                        <a href={item.links?.rsvp} class="button inverted"><button>Join</button></a>
                }
            </div>

        </div>

    </div>
    <div class="detail hidden flex sm:gap-4">
        <div class="w-0 sm:w-28"></div>
        <div>
            <div>Date: <span class="text-white">{dateFormat(item.date)} {item.days ? ' - ' + dateFormat(dateEnd(item.date, item.days)) + ` (${item.days} days)` : ''}</span></div>
            <div>
                Place: {item.place && <span set:html={marked.parseInline(item.place)} class="text-white"></span> || "TBD"}
                {item.place && item['place-address'] && <span> @ </span><span class="text-white">{item['place-address']}</span>}
            </div>
            <div>Status: <span class:list={[status.color]} class="mr-1.5 text-xs">‚óè</span> {status.title}</div>
            <div>Lead: <span class="text-white">{item.lead || 'n/a'}</span></div>

            <div class="mt-4 mb-2">
                {item.links?.rsvp &&
                    <a href={item.links.rsvp} class="button inverted"><button>More details & RSVP</button></a>
                }
                {item.links?.web &&
                    <a href={item.links.web} class="button inverted"><button>Website</button></a>
                }
            </div>

            {item.speakers &&
                <div class="mt-6 mb-6">
                    <h2>Speakers</h2>
                    <div class="grid grid-cols-1 gap-6 mt-4">
                        {item.speakers.map(spId => getSpeaker(spId)).map((speaker) => (
                            <div class="flex gap-4">
                                <div><img class="w-14 h-14 aspect-square rounded-full" src={speaker.imageUrl} /></div>
                                <div>
                                    <div>
                                        <span class="text-white">{speaker.name}</span>
                                        {speaker.refs?.twitter &&
                                            <span class="ml-2">(<a href={"https://twitter.com/"+speaker.refs.twitter}>@{speaker.refs.twitter}</a>)</span>
                                        }
                                    </div>
                                    <div set:html={marked.parseInline(speaker.caption)} class="text-sm"></div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            }
        </div>
    </div>
</div>